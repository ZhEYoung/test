<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.StudentClassMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.exam.entity.StudentClass">
        <id column="sc_id" property="scId"/>
        <result column="student_id" property="studentId"/>
        <result column="class_id" property="classId"/>
        <result column="status" property="status"/>
        <result column="join_time" property="joinTime"/>
        <result column="left_time" property="leftTime"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        sc_id, student_id, class_id, status, join_time, left_time
    </sql>

    <!-- 插入关联记录 -->
    <insert id="insert" parameterType="com.exam.entity.StudentClass" useGeneratedKeys="true" keyProperty="scId">
        INSERT INTO student_class (
            student_id, class_id, status, join_time, left_time
        ) VALUES (
            #{studentId}, #{classId}, #{status}, #{joinTime}, #{leftTime}
        )
    </insert>

    <!-- 根据ID删除关联记录 -->
    <delete id="deleteById">
        DELETE FROM student_class WHERE sc_id = #{scId}
    </delete>

    <!-- 更新关联信息 -->
    <update id="update" parameterType="com.exam.entity.StudentClass">
        UPDATE student_class
        <set>
            <if test="studentId != null">student_id = #{studentId},</if>
            <if test="classId != null">class_id = #{classId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="joinTime != null">join_time = #{joinTime},</if>
            <if test="leftTime != null">left_time = #{leftTime},</if>
        </set>
        WHERE sc_id = #{scId}
    </update>

    <!-- 根据ID查询关联记录 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_class
        WHERE sc_id = #{scId}
    </select>

    <!-- 查询所有关联记录 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_class
        ORDER BY join_time DESC
    </select>

    <!-- 根据学生ID查询关联记录 -->
    <select id="selectByStudentId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_class 
        WHERE student_id = #{studentId}
        ORDER BY join_time DESC
    </select>

    <!-- 根据班级ID查询关联记录 -->
    <select id="selectByClassId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_class 
        WHERE class_id = #{classId}
        ORDER BY join_time DESC
    </select>

    <!-- 查询学生在指定班级的关联记录 -->
    <select id="selectByStudentAndClass" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_class 
        WHERE student_id = #{studentId} 
        AND class_id = #{classId}
        LIMIT 1
    </select>

    <!-- 更新学生状态和时间 -->
    <update id="updateStatusAndTime">
        UPDATE student_class 
        <set>
            <if test="status != null">status = #{status},</if>
            <if test="joinTime != null">join_time = #{joinTime},</if>
            <if test="leftTime != null">left_time = #{leftTime},</if>
        </set>
        WHERE sc_id = #{scId}
    </update>

    <!-- 批量插入学生班级关联 -->
    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="list.scId">
        INSERT INTO student_class (
            student_id, class_id, status, join_time
        ) VALUES 
        <foreach collection="list" item="sc" separator=",">
            (#{sc.studentId}, #{sc.classId}, #{sc.status}, #{sc.joinTime})
        </foreach>
    </insert>

    <!-- 批量更新学生状态 -->
    <update id="batchUpdateStatus">
        UPDATE student_class 
        SET status = #{status},
            left_time = CASE 
                WHEN #{status} = 0 THEN CURRENT_TIMESTAMP
                ELSE NULL
            END
        WHERE class_id = #{classId}
        AND student_id IN
        <foreach collection="studentIds" item="studentId" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </update>

    <!-- 统计班级学生数量 -->
    <select id="countStudentsByClass" resultType="int">
        SELECT COUNT(1)
        FROM student_class
        WHERE class_id = #{classId}
        AND status = 1
    </select>

    <!-- 统计学生所在班级数量 -->
    <select id="countClassesByStudent" resultType="int">
        SELECT COUNT(1)
        FROM student_class
        WHERE student_id = #{studentId}
        AND status = 1
    </select>

    <!-- 查询班级的活跃学生 -->
    <select id="selectActiveStudents" resultType="com.exam.entity.Student">
        SELECT s.*
        FROM student s
        INNER JOIN student_class sc ON s.student_id = sc.student_id
        WHERE sc.class_id = #{classId}
        AND sc.status = 1
        ORDER BY sc.join_time DESC
    </select>

    <!-- 查询学生的所有班级 -->
    <select id="selectStudentClasses" resultType="com.exam.entity.Class">
        SELECT c.*
        FROM class c
        INNER JOIN student_class sc ON c.class_id = sc.class_id
        WHERE sc.student_id = #{studentId}
        AND sc.status = 1
        ORDER BY sc.join_time DESC
    </select>

    <!-- 统计班级学生加入退出情况 -->
    <select id="analyzeClassStudentFlow" resultType="java.util.Map">
        SELECT 
            DATE(join_time) as date,
            COUNT(CASE WHEN status = 1 THEN 1 END) as join_count,
            COUNT(CASE WHEN status = 0 THEN 1 END) as left_count,
            COUNT(1) as total_count
        FROM student_class
        WHERE class_id = #{classId}
        AND join_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY DATE(join_time)
        ORDER BY date
    </select>

    <!-- 批量删除关联记录 -->
    <delete id="batchDelete">
        DELETE FROM student_class 
        WHERE sc_id IN
        <foreach collection="scIds" item="scId" open="(" separator="," close=")">
            #{scId}
        </foreach>
    </delete>

    <!-- 检查学生是否在班级中 -->
    <select id="checkStudentInClass" resultType="boolean">
        SELECT EXISTS(
            SELECT 1 
            FROM student_class 
            WHERE student_id = #{studentId}
            AND class_id = #{classId}
            AND status = 1
        )
    </select>
</mapper>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.LogMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.exam.entity.Log">
        <id column="log_id" property="logId"/>
        <result column="user_id" property="userId"/>
        <result column="action_type" property="actionType"/>
        <result column="action_description" property="actionDescription"/>
        <result column="created_time" property="createdTime"/>
        <result column="object_type" property="objectType"/>
        <result column="ip_address" property="ipAddress"/>
        <result column="device_info" property="deviceInfo"/>
        <result column="status" property="status"/>
        <!-- 关联用户信息 -->
        <association property="user" javaType="com.exam.entity.User">
            <id column="user_id" property="userId"/>
            <result column="username" property="username"/>
            <result column="role" property="role"/>
        </association>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        log_id, user_id, action_type, action_description, created_time,
        object_type, ip_address, device_info, status
    </sql>

    <!-- 带用户信息的列 -->
    <sql id="Base_Column_List_With_User">
        l.log_id, l.user_id, l.action_type, l.action_description, l.created_time,
        l.object_type, l.ip_address, l.device_info, l.status,
        u.username, u.role
    </sql>

    <!-- 插入日志记录 -->
    <insert id="insert" parameterType="com.exam.entity.Log" useGeneratedKeys="true" keyProperty="logId">
        INSERT INTO log (
            user_id, action_type, action_description, created_time,
            object_type, ip_address, device_info, status
        ) VALUES (
            #{userId}, #{actionType}, #{actionDescription}, #{createdTime},
            #{objectType}, #{ipAddress}, #{deviceInfo}, #{status}
        )
    </insert>

    <!-- 根据ID删除日志 -->
    <delete id="deleteById">
        DELETE FROM log WHERE log_id = #{logId}
    </delete>

    <!-- 更新日志信息 -->
    <update id="update" parameterType="com.exam.entity.Log">
        UPDATE log
        <set>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="actionType != null">action_type = #{actionType},</if>
            <if test="actionDescription != null">action_description = #{actionDescription},</if>
            <if test="createdTime != null">created_time = #{createdTime},</if>
            <if test="objectType != null">object_type = #{objectType},</if>
            <if test="ipAddress != null">ip_address = #{ipAddress},</if>
            <if test="deviceInfo != null">device_info = #{deviceInfo},</if>
            <if test="status != null">status = #{status}</if>
        </set>
        WHERE log_id = #{logId}
    </update>

    <!-- 根据ID查询日志 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.log_id = #{logId}
    </select>

    <!-- 查询所有日志 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        ORDER BY l.created_time DESC
    </select>

    <!-- 根据用户ID查询日志列表 -->
    <select id="selectByUserId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.user_id = #{userId}
        ORDER BY l.created_time DESC
    </select>

    <!-- 根据操作类型查询日志列表 -->
    <select id="selectByActionType" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.action_type = #{actionType}
        ORDER BY l.created_time DESC
    </select>

    <!-- 根据时间范围查询日志列表 -->
    <select id="selectByTimeRange" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.created_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY l.created_time DESC
    </select>

    <!-- 根据操作对象查询日志列表 -->
    <select id="selectByObjectType" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.object_type = #{objectType}
        ORDER BY l.created_time DESC
    </select>

    <!-- 批量插入日志 -->
    <insert id="batchInsert">
        INSERT INTO log (
            user_id, action_type, action_description, created_time,
            object_type, ip_address, device_info, status
        ) VALUES 
        <foreach collection="list" item="log" separator=",">
            (#{log.userId}, #{log.actionType}, #{log.actionDescription}, #{log.createdTime},
             #{log.objectType}, #{log.ipAddress}, #{log.deviceInfo}, #{log.status})
        </foreach>
    </insert>

    <!-- 高级查询日志 -->
    <select id="selectByConditions" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        <where>
            <if test="userId != null">
                AND l.user_id = #{userId}
            </if>
            <if test="actionType != null">
                AND l.action_type = #{actionType}
            </if>
            <if test="objectType != null and objectType != ''">
                AND l.object_type = #{objectType}
            </if>
            <if test="startTime != null">
                AND l.created_time >= #{startTime}
            </if>
            <if test="endTime != null">
                AND l.created_time &lt;= #{endTime}
            </if>
            <if test="status != null and status != ''">
                AND l.status = #{status}
            </if>
        </where>
        ORDER BY l.created_time DESC
        <if test="offset != null and limit != null">
            LIMIT #{offset}, #{limit}
        </if>
    </select>

    <!-- 统计用户操作频率 -->
    <select id="countUserActions" resultType="java.util.Map">
        SELECT 
            l.user_id,
            u.username,
            COUNT(*) as action_count,
            DATE_FORMAT(l.created_time, '%Y-%m-%d') as action_date,
            GROUP_CONCAT(DISTINCT l.action_type) as action_types
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.created_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY l.user_id, u.username, DATE_FORMAT(l.created_time, '%Y-%m-%d')
        ORDER BY action_date DESC, action_count DESC
    </select>

    <!-- 统计操作类型分布 -->
    <select id="countActionTypes" resultType="java.util.Map">
        SELECT 
            l.action_type,
            COUNT(*) as count,
            COUNT(DISTINCT l.user_id) as user_count,
            MIN(l.created_time) as first_action_time,
            MAX(l.created_time) as last_action_time,
            ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage
        FROM log l
        WHERE l.created_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY l.action_type
        ORDER BY count DESC
    </select>

    <!-- 统计异常操作 -->
    <select id="countExceptionLogs" resultType="java.util.Map">
        SELECT 
            l.user_id,
            u.username,
            l.action_type,
            COUNT(*) as error_count,
            GROUP_CONCAT(DISTINCT l.action_description) as error_descriptions,
            MIN(l.created_time) as first_error_time,
            MAX(l.created_time) as last_error_time
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.created_time BETWEEN #{startTime} AND #{endTime}
        AND (l.status = 'ERROR' OR l.action_description LIKE '%error%' OR l.action_description LIKE '%exception%')
        GROUP BY l.user_id, u.username, l.action_type
        ORDER BY error_count DESC
    </select>

    <!-- 分析用户行为模式 -->
    <select id="analyzeUserBehavior" resultType="java.util.Map">
        SELECT 
            l.action_type,
            COUNT(*) as action_count,
            DATE_FORMAT(l.created_time, '%H') as hour_of_day,
            COUNT(DISTINCT l.object_type) as object_type_count,
            GROUP_CONCAT(DISTINCT l.object_type) as object_types,
            ROUND(AVG(CASE WHEN l.status = 'ERROR' THEN 1 ELSE 0 END) * 100, 2) as error_rate
        FROM log l
        WHERE l.user_id = #{userId}
        AND l.created_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY l.action_type, DATE_FORMAT(l.created_time, '%H')
        ORDER BY hour_of_day ASC, action_count DESC
    </select>

    <!-- 清理过期日志 -->
    <delete id="deleteExpiredLogs">
        DELETE FROM log 
        WHERE created_time &lt; #{expireTime}
    </delete>

    <!-- 批量清理日志 -->
    <delete id="batchCleanLogs">
        DELETE FROM log 
        WHERE log_id IN
        <foreach collection="logIds" item="logId" open="(" separator="," close=")">
            #{logId}
        </foreach>
    </delete>

    <!-- 查询系统操作记录 -->
    <select id="selectSystemOperations" resultType="java.util.Map">
        SELECT 
            l.action_type,
            l.object_type,
            COUNT(*) as operation_count,
            COUNT(DISTINCT l.user_id) as user_count,
            DATE_FORMAT(l.created_time, '%Y-%m-%d') as operation_date,
            ROUND(COUNT(CASE WHEN l.status = 'ERROR' THEN 1 END) * 100.0 / COUNT(*), 2) as error_rate,
            GROUP_CONCAT(DISTINCT l.status) as status_list
        FROM log l
        WHERE l.created_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY l.action_type, l.object_type, DATE_FORMAT(l.created_time, '%Y-%m-%d')
        ORDER BY operation_date DESC, operation_count DESC
    </select>



    <!-- 查询关键操作日志 -->
    <select id="selectCriticalLogs" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.action_type IN
        <foreach collection="actionTypes" item="actionType" open="(" separator="," close=")">
            #{actionType}
        </foreach>
        AND l.created_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY l.created_time DESC
    </select>

    <!-- 统计日志存储情况 -->
    <select id="countLogStorage" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_logs,
            COUNT(DISTINCT user_id) as total_users,
            COUNT(DISTINCT action_type) as total_action_types,
            SUM(LENGTH(action_description)) as total_description_length,
            MIN(created_time) as earliest_log,
            MAX(created_time) as latest_log,
            COUNT(DISTINCT DATE_FORMAT(created_time, '%Y-%m-%d')) as total_days
        FROM log
    </select>

    <!-- 查询用户登录记录 -->
    <select id="selectLoginHistory" resultType="java.util.Map">
        SELECT
            l.created_time as login_time,
            l.action_description,
            l.object_type as login_type,
            l.ip_address,
            l.device_info,
            l.status,
            TIMESTAMPDIFF(HOUR, LAG(l.created_time) OVER (ORDER BY l.created_time), l.created_time) as hours_since_last_login
        FROM log l
        WHERE l.user_id = #{userId}
        AND l.action_type = 3  -- LOGIN
        AND l.created_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY l.created_time DESC
    </select>

    <!-- 根据IP地址查询日志 -->
    <select id="selectByIpAddress" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.ip_address = #{ipAddress}
        ORDER BY l.created_time DESC
    </select>

    <!-- 根据状态查询日志 -->
    <select id="selectByStatus" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.status = #{status}
        ORDER BY l.created_time DESC
    </select>

    <!-- 查询用户最近的操作日志 -->
    <select id="selectRecentLogs" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.user_id = #{userId}
        ORDER BY l.created_time DESC
        LIMIT #{limit}
    </select>

    <!-- 查询异常日志 -->
    <select id="selectExceptionLogs" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List_With_User"/>
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        WHERE l.status = 'ERROR'
        AND l.created_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY l.created_time DESC
    </select>

    <!-- 统计用户操作次数 -->
    <select id="countUserOperations" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM log
        WHERE user_id = #{userId}
    </select>

    <!-- 统计操作类型分布 -->
    <select id="countByOperationType" resultType="java.util.Map">
        SELECT 
            action_type,
            COUNT(*) as count,
            ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage
        FROM log
        GROUP BY action_type
        ORDER BY count DESC
    </select>

    <!-- 统计操作状态分布 -->
    <select id="countByStatus" resultType="java.util.Map">
        SELECT 
            status,
            COUNT(*) as count,
            ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage
        FROM log
        GROUP BY status
        ORDER BY count DESC
    </select>

    <!-- 统计IP访问次数 -->
    <select id="countByIpAddress" resultType="java.util.Map">
        SELECT 
            ip_address,
            COUNT(*) as visit_count,
            COUNT(DISTINCT user_id) as user_count,
            MIN(created_time) as first_visit,
            MAX(created_time) as last_visit
        FROM log
        WHERE ip_address IS NOT NULL
        GROUP BY ip_address
        ORDER BY visit_count DESC
    </select>

    <!-- 统计每日操作次数 -->
    <select id="countDailyOperations" resultType="java.util.Map">
        SELECT 
            DATE_FORMAT(created_time, '%Y-%m-%d') as operation_date,
            COUNT(*) as operation_count,
            COUNT(DISTINCT user_id) as user_count,
            COUNT(DISTINCT action_type) as action_type_count,
            ROUND(COUNT(CASE WHEN status = 'ERROR' THEN 1 END) * 100.0 / COUNT(*), 2) as error_rate
        FROM log
        WHERE created_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY DATE_FORMAT(created_time, '%Y-%m-%d')
        ORDER BY operation_date DESC
    </select>

    <!-- 查询高频操作用户 -->
    <select id="selectFrequentUsers" resultType="java.util.Map">
        SELECT 
            l.user_id,
            u.username,
            COUNT(*) as operation_count,
            COUNT(DISTINCT l.action_type) as action_type_count,
            COUNT(DISTINCT DATE_FORMAT(l.created_time, '%Y-%m-%d')) as active_days,
            MIN(l.created_time) as first_operation,
            MAX(l.created_time) as last_operation,
            ROUND(COUNT(CASE WHEN l.status = 'ERROR' THEN 1 END) * 100.0 / COUNT(*), 2) as error_rate
        FROM log l
        LEFT JOIN user u ON l.user_id = u.user_id
        GROUP BY l.user_id, u.username
        ORDER BY operation_count DESC
        LIMIT #{limit}
    </select>

    <!-- 查询可疑操作日志 -->
    <select id="selectSuspiciousLogs" resultMap="BaseResultMap">
        SELECT DISTINCT l.*
        FROM log l
        WHERE EXISTS (
            SELECT 1 
            FROM log l2 
            WHERE l2.user_id = l.user_id 
            AND l2.action_type = 3
            AND l2.status = 'FAILED'
            AND l2.created_time >= DATE_SUB(NOW(), INTERVAL 1 HOUR)
            GROUP BY l2.user_id
            HAVING COUNT(*) >= 3
        )
        OR EXISTS (
            SELECT 1 
            FROM log l2 
            WHERE l2.user_id = l.user_id 
            AND l2.action_type = 2
            AND l2.created_time >= DATE_SUB(NOW(), INTERVAL 5 MINUTE)
            GROUP BY l2.user_id
            HAVING COUNT(*) >= 5
        )
        OR (HOUR(l.created_time) BETWEEN 0 AND 5 
            AND l.action_type IN (1, 2, 4)
            AND l.object_type IN ('SYSTEM', 'PERMISSION'))
        OR (l.action_type = 4
            AND l.object_type = 'PERMISSION')
        OR l.status = 'FAILED'
        ORDER BY l.created_time DESC
    </select>

    <!-- 统计每日异常日志数量 -->
    <select id="countDailyExceptions" resultType="java.util.Map">
        SELECT 
            DATE_FORMAT(created_time, '%Y-%m-%d') as date,
            COUNT(*) as exception_count,
            COUNT(DISTINCT user_id) as affected_users,
            COUNT(DISTINCT action_type) as affected_actions,
            GROUP_CONCAT(DISTINCT action_type) as error_types,
            ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as percentage
        FROM log
        WHERE (status = 'ERROR' 
            OR action_description LIKE '%error%'
            OR action_description LIKE '%exception%')
        AND created_time BETWEEN #{startTime} AND #{endTime}
        GROUP BY DATE_FORMAT(created_time, '%Y-%m-%d')
        ORDER BY date DESC
    </select>
</mapper>

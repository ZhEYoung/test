<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.ExamPaperMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.exam.entity.ExamPaper">
        <id column="paper_id" property="paperId"/>
        <result column="paper_name" property="paperName"/>
        <result column="paper_status" property="paperStatus"/>
        <result column="subject_id" property="subjectId"/>
        <result column="teacher_id" property="teacherId"/>
        <result column="created_time" property="createdTime"/>
        <result column="exam_type" property="examType"/>
        <result column="academic_term" property="academicTerm"/>
        <result column="paper_difficulty" property="paperDifficulty"/>
    </resultMap>

    <!-- 根据学科ID查询试卷列表 -->
    <select id="selectBySubjectId" resultMap="BaseResultMap">
        SELECT * FROM exam_paper WHERE subject_id = #{subjectId}
    </select>

    <!-- 根据教师ID查询试卷列表 -->
    <select id="selectByTeacherId" resultMap="BaseResultMap">
        SELECT * FROM exam_paper WHERE teacher_id = #{teacherId}
    </select>

    <!-- 根据试卷名称查询 -->
    <select id="selectByName" resultMap="BaseResultMap">
        SELECT * FROM exam_paper WHERE paper_name = #{paperName}
    </select>

    <!-- 根据试卷状态查询 -->
    <select id="selectByStatus" resultMap="BaseResultMap">
        SELECT * FROM exam_paper WHERE paper_status = #{paperStatus}
    </select>

    <!-- 根据考试类型查询 -->
    <select id="selectByExamType" resultMap="BaseResultMap">
        SELECT * FROM exam_paper WHERE exam_type = #{examType}
    </select>

    <!-- 更新试卷状态 -->
    <update id="updateStatus">
        UPDATE exam_paper SET paper_status = #{status} WHERE paper_id = #{paperId}
    </update>

    <!-- 根据难度范围查询试卷 -->
    <select id="selectByDifficultyRange" resultMap="BaseResultMap">
        SELECT * FROM exam_paper 
        WHERE paper_difficulty BETWEEN #{minDifficulty} AND #{maxDifficulty}
    </select>

    <!-- 查询试卷中的所有题目 -->
    <select id="selectPaperQuestions" resultType="com.exam.entity.Question">
        SELECT q.* FROM question q
        INNER JOIN exam_paper_question epq ON q.question_id = epq.question_id
        WHERE epq.paper_id = #{paperId}
        ORDER BY epq.question_order
    </select>

    <!-- 查询试卷题目及分值 -->
    <select id="selectPaperQuestionsWithScore" resultType="java.util.Map">
        SELECT q.*, epq.question_score, epq.question_order
        FROM question q
        INNER JOIN exam_paper_question epq ON q.question_id = epq.question_id
        WHERE epq.paper_id = #{paperId}
        ORDER BY epq.question_order
    </select>

    <!-- 更新试卷题目分值 -->
    <update id="updateQuestionScore">
        UPDATE exam_paper_question 
        SET question_score = #{score}
        WHERE paper_id = #{paperId} AND question_id = #{questionId}
    </update>

    <!-- 批量更新试卷题目分值 -->
    <update id="batchUpdateQuestionScores">
        <foreach collection="questionIds" item="questionId" index="index" separator=";">
            UPDATE exam_paper_question 
            SET question_score = #{scores[${index}]}
            WHERE paper_id = #{paperId} AND question_id = #{questionId}
        </foreach>
    </update>

    <!-- 查询指定学期的试卷 -->
    <select id="selectByAcademicTerm" resultMap="BaseResultMap">
        SELECT * FROM exam_paper 
        WHERE academic_term = #{academicTerm}
    </select>

    <!-- 统计试卷总分 -->
    <select id="calculateTotalScore" resultType="java.math.BigDecimal">
        SELECT SUM(question_score) 
        FROM exam_paper_question
        WHERE paper_id = #{paperId}
    </select>

    <!-- 统计试卷平均分 -->
    <select id="calculateAverageScore" resultType="java.math.BigDecimal">
        SELECT AVG(ss.score)
        FROM student_score ss
        INNER JOIN exam e ON ss.exam_id = e.exam_id
        WHERE e.paper_id = #{paperId}
    </select>

    <!-- 统计试卷及格率 -->
    <select id="calculatePassRate" resultType="java.math.BigDecimal">
        SELECT COUNT(CASE WHEN ss.score >= #{passScore} THEN 1 END) * 100.0 / COUNT(*)
        FROM student_score ss
        INNER JOIN exam e ON ss.exam_id = e.exam_id
        WHERE e.paper_id = #{paperId}
    </select>

    <!-- 查询试卷成绩分布 -->
    <select id="selectScoreDistribution" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN score >= 90 THEN '90-100'
                WHEN score >= 80 THEN '80-89'
                WHEN score >= 70 THEN '70-79'
                WHEN score >= 60 THEN '60-69'
                ELSE '0-59'
            END as score_range,
            COUNT(*) as count
        FROM student_score ss
        INNER JOIN exam e ON ss.exam_id = e.exam_id
        WHERE e.paper_id = #{paperId}
        GROUP BY score_range
        ORDER BY score_range DESC
    </select>

    <!-- 查询最高分 -->
    <select id="selectHighestScore" resultType="java.math.BigDecimal">
        SELECT MAX(ss.score)
        FROM student_score ss
        INNER JOIN exam e ON ss.exam_id = e.exam_id
        WHERE e.paper_id = #{paperId}
    </select>

    <!-- 查询最低分 -->
    <select id="selectLowestScore" resultType="java.math.BigDecimal">
        SELECT MIN(ss.score)
        FROM student_score ss
        INNER JOIN exam e ON ss.exam_id = e.exam_id
        WHERE e.paper_id = #{paperId}
    </select>

    <!-- 批量发布试卷 -->
    <update id="batchPublish">
        UPDATE exam_paper SET paper_status = 1
        WHERE paper_id IN
        <foreach collection="paperIds" item="paperId" open="(" separator="," close=")">
            #{paperId}
        </foreach>
    </update>

    <!-- 批量更新试卷状态 -->
    <update id="batchUpdateStatus">
        UPDATE exam_paper SET paper_status = #{status}
        WHERE paper_id IN
        <foreach collection="paperIds" item="paperId" open="(" separator="," close=")">
            #{paperId}
        </foreach>
    </update>

    <!-- 复制试卷（包含题目） -->
    <insert id="copyPaper" useGeneratedKeys="true" keyProperty="newPaperId">
        INSERT INTO exam_paper (
            paper_name, paper_status, subject_id, teacher_id,
            created_time, exam_type, academic_term, paper_difficulty
        )
        SELECT 
            #{newPaperName}, 0, subject_id, teacher_id,
            CURRENT_TIMESTAMP, exam_type, academic_term, paper_difficulty
        FROM exam_paper
        WHERE paper_id = #{sourcePaperId};

        INSERT INTO exam_paper_question (
            paper_id, question_id, question_order, question_score
        )
        SELECT 
            #{newPaperId}, question_id, question_order, question_score
        FROM exam_paper_question
        WHERE paper_id = #{sourcePaperId}
    </insert>
</mapper>

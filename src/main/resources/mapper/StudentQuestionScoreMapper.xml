<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.StudentQuestionScoreMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.exam.entity.StudentQuestionScore">
        <id column="record_id" property="recordId"/>
        <result column="exam_id" property="examId"/>
        <result column="student_id" property="studentId"/>
        <result column="question_id" property="questionId"/>
        <result column="score_id" property="scoreId"/>
        <result column="answer" property="answer"/>
        <result column="score" property="score"/>
        <result column="status" property="status"/>
        <!-- 扩展字段映射 -->
        <result column="exam_name" property="examName"/>
        <result column="student_name" property="studentName"/>
        <result column="question_content" property="questionContent"/>
        <result column="question_type" property="questionType"/>
        <result column="correct_answer" property="correctAnswer"/>
        <result column="status_name" property="statusName"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        record_id, exam_id, student_id, question_id, score_id, answer, score, status
    </sql>

    <!-- 插入单条题目得分记录 -->
    <insert id="insert" parameterType="com.exam.entity.StudentQuestionScore" useGeneratedKeys="true" keyProperty="recordId">
        INSERT INTO student_question_score (
            exam_id, student_id, question_id, score_id,
            answer, score, status
        ) VALUES (
            #{examId}, #{studentId}, #{questionId}, #{scoreId},
            #{answer}, #{score}, #{status}
        )
    </insert>

    <!-- 根据ID删除得分记录 -->
    <delete id="deleteById">
        DELETE FROM student_question_score WHERE record_id = #{recordId}
    </delete>

    <!-- 更新得分记录 -->
    <update id="update" parameterType="com.exam.entity.StudentQuestionScore">
        UPDATE student_question_score
        SET 
            exam_id = #{examId},
            student_id = #{studentId},
            question_id = #{questionId},
            score_id = #{scoreId},
            answer = #{answer},
            score = #{score},
            status = #{status}
        WHERE record_id = #{recordId}
    </update>

    <!-- 根据ID查询得分记录 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_question_score
        WHERE record_id = #{recordId}
    </select>

    <!-- 查询所有得分记录 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_question_score
        ORDER BY record_id DESC
    </select>

    <!-- 根据成绩ID查询题目得分列表 -->
    <select id="selectByScoreId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_question_score 
        WHERE score_id = #{scoreId}
        ORDER BY record_id
    </select>

    <!-- 根据考试ID和学生ID查询题目得分列表 -->
    <select id="selectByExamAndStudent" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_question_score 
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
        ORDER BY record_id
    </select>

    <!-- 根据题目ID查询所有学生的得分列表 -->
    <select id="selectByQuestionId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM student_question_score 
        WHERE question_id = #{questionId}
        ORDER BY score DESC
    </select>

    <!-- 批量插入题目得分记录 -->
    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="list.recordId">
        INSERT INTO student_question_score (
            exam_id, student_id, question_id, score_id,
            answer, score, status
        ) VALUES 
        <foreach collection="list" item="record" separator=",">
            (#{record.examId}, #{record.studentId}, #{record.questionId}, 
             #{record.scoreId}, #{record.answer}, #{record.score}, #{record.status})
        </foreach>
    </insert>

    <!-- 更新题目得分和批改状态 -->
    <update id="updateScoreAndStatus">
        UPDATE student_question_score 
        SET score = #{score}, 
            status = #{status}
        WHERE record_id = #{recordId}
    </update>

    <!-- 批量更新题目得分 -->
    <update id="batchUpdateScore">
        <foreach collection="records" item="record" separator=";">
            UPDATE student_question_score 
            SET score = #{record.score},
                status = 1
            WHERE record_id = #{record.recordId}
        </foreach>
    </update>

    <!-- 统计题目正确率 -->
    <select id="calculateQuestionCorrectRate" resultType="java.util.Map">
        SELECT 
            COUNT(1) as total_answers,
            SUM(CASE WHEN score = epq.question_score THEN 1 ELSE 0 END) as correct_count,
            CAST(SUM(CASE WHEN score = epq.question_score THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(1), 0) AS DECIMAL(5,2)) as correct_rate
        FROM student_question_score sqs
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        WHERE sqs.question_id = #{questionId}
    </select>

    <!-- 统计题目得分分布 -->
    <select id="analyzeScoreDistribution" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN (score / epq.question_score * 100) >= 90 THEN '90-100%'
                WHEN (score / epq.question_score * 100) >= 80 THEN '80-89%'
                WHEN (score / epq.question_score * 100) >= 70 THEN '70-79%'
                WHEN (score / epq.question_score * 100) >= 60 THEN '60-69%'
                ELSE '0-59%'
            END as score_range,
            COUNT(1) as count,
            CAST(COUNT(1) * 100.0 / SUM(COUNT(1)) OVER() AS DECIMAL(5,2)) as percentage
        FROM student_question_score sqs
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        WHERE sqs.question_id = #{questionId}
        GROUP BY 
            CASE 
                WHEN (score / epq.question_score * 100) >= 90 THEN '90-100%'
                WHEN (score / epq.question_score * 100) >= 80 THEN '80-89%'
                WHEN (score / epq.question_score * 100) >= 70 THEN '70-79%'
                WHEN (score / epq.question_score * 100) >= 60 THEN '60-69%'
                ELSE '0-59%'
            END
        ORDER BY score_range DESC
    </select>

    <!-- 分析答题时间分布 -->
    <select id="analyzeAnswerTimeDistribution" resultType="java.util.Map">
        SELECT 
            CASE 
                WHEN TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) &lt;= 5 THEN '0-5分钟'
                WHEN TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) &lt;= 10 THEN '6-10分钟'
                WHEN TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) &lt;= 15 THEN '11-15分钟'
                ELSE '15分钟以上'
            END as time_range,
            COUNT(1) as count,
            CAST(COUNT(1) * 100.0 / SUM(COUNT(1)) OVER() AS DECIMAL(5,2)) as percentage
        FROM student_question_score sqs
        INNER JOIN exam_student es 
            ON sqs.student_id = es.student_id
            AND sqs.exam_id = es.exam_id
        WHERE sqs.question_id = #{questionId}
        AND sqs.exam_id = #{examId}
        GROUP BY 
            CASE 
                WHEN TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) &lt;= 5 THEN '0-5分钟'
                WHEN TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) &lt;= 10 THEN '6-10分钟'
                WHEN TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) &lt;= 15 THEN '11-15分钟'
                ELSE '15分钟以上'
            END
        ORDER BY MIN(TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time))
    </select>

    <!-- 查询题目平均得分 -->
    <select id="calculateAverageScore" resultType="java.math.BigDecimal">
        SELECT CAST(AVG(score) AS DECIMAL(5,2))
        FROM student_question_score
        WHERE question_id = #{questionId}
        AND exam_id = #{examId}
    </select>

    <!-- 查询最难题目列表 -->
    <select id="selectDifficultQuestions" resultType="java.util.Map">
        SELECT 
            q.*,
            CAST(AVG(sqs.score / epq.question_score) * 100 AS DECIMAL(5,2)) as avg_score_rate,
            COUNT(1) as answer_count,
            MIN(sqs.score / epq.question_score * 100) as min_score_rate,
            MAX(sqs.score / epq.question_score * 100) as max_score_rate
        FROM student_question_score sqs
        INNER JOIN question q ON sqs.question_id = q.question_id
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        GROUP BY 
            q.question_id, q.qb_id, q.content, q.answer, 
            q.type, q.difficulty
        HAVING avg_score_rate &lt; 60
        ORDER BY avg_score_rate
        LIMIT #{limit}
    </select>

    <!-- 查询最容易题目列表 -->
    <select id="selectEasyQuestions" resultType="java.util.Map">
        SELECT 
            q.*,
            CAST(AVG(sqs.score / epq.question_score) * 100 AS DECIMAL(5,2)) as avg_score_rate,
            COUNT(1) as answer_count,
            MIN(sqs.score / epq.question_score * 100) as min_score_rate,
            MAX(sqs.score / epq.question_score * 100) as max_score_rate
        FROM student_question_score sqs
        INNER JOIN question q ON sqs.question_id = q.question_id
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        GROUP BY 
            q.question_id, q.qb_id, q.content, q.answer, 
            q.type, q.difficulty
        HAVING avg_score_rate > 90
        ORDER BY avg_score_rate DESC
        LIMIT #{limit}
    </select>

    <!-- 分析学生答题模式 -->
    <select id="analyzeAnswerPattern" resultType="java.util.Map">
        SELECT 
            q.type,
            COUNT(1) as question_count,
            CAST(AVG(sqs.score / epq.question_score) * 100 AS DECIMAL(5,2)) as avg_score_rate,
            MIN(sqs.score / epq.question_score * 100) as min_score_rate,
            MAX(sqs.score / epq.question_score * 100) as max_score_rate
        FROM student_question_score sqs
        INNER JOIN question q ON sqs.question_id = q.question_id
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        WHERE sqs.student_id = #{studentId}
        GROUP BY q.type
        ORDER BY q.type
    </select>



    <!-- 查询需要人工批改的题目 -->
    <select id="selectNeedManualGrading" resultMap="BaseResultMap">
        SELECT 
            sqs.*,
            e.exam_name,
            s.name as student_name,
            q.question_id as question_id,
            q.content as question_content,
            q.type as question_type,
            q.answer as correct_answer,
            epq.question_score as full_score
        FROM student_question_score sqs
        INNER JOIN exam e ON sqs.exam_id = e.exam_id
        INNER JOIN exam_paper_question epq ON sqs.question_id = epq.question_id AND epq.paper_id = e.paper_id
        INNER JOIN question q ON sqs.question_id = q.question_id
        INNER JOIN student s ON sqs.student_id = s.student_id
        WHERE sqs.exam_id = #{examId}
        AND sqs.status = 0
        AND q.type IN (3, 4)  -- 填空题和简答题需要人工批改
        ORDER BY epq.question_order, sqs.record_id
    </select>

    <!-- 批量更新批改状态 -->
    <update id="batchUpdateGradingStatus">
        UPDATE student_question_score
        SET status = #{status}
        WHERE record_id IN
        <foreach collection="recordIds" item="recordId" open="(" separator="," close=")">
            #{recordId}
        </foreach>
    </update>

    <!-- 统计批改进度 -->
    <select id="countGradingProgress" resultType="java.util.Map">
        SELECT 
            COUNT(1) as total_count,
            SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) as graded_count,
            CAST(SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(1) AS DECIMAL(5,2)) as progress_rate
        FROM student_question_score
        WHERE exam_id = #{examId}
    </select>

    <!-- 分页查询 -->
    <select id="selectPage" resultMap="BaseResultMap">
        SELECT 
            sqs.*,
            e.exam_name,
            s.name as student_name,
            q.content as question_content,
            q.type as question_type,
            q.answer as correct_answer,
            CASE sqs.status 
                WHEN 0 THEN '未批改'
                WHEN 1 THEN '已批改'
                ELSE '未知'
            END as status_name
        FROM student_question_score sqs
        LEFT JOIN exam e ON sqs.exam_id = e.exam_id
        LEFT JOIN student s ON sqs.student_id = s.student_id
        LEFT JOIN question q ON sqs.question_id = q.question_id
        ORDER BY sqs.record_id DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 统计总记录数 -->
    <select id="countTotal" resultType="java.lang.Integer">
        SELECT COUNT(1) FROM student_question_score
    </select>

    <!-- 条件查询 -->
    <select id="selectByCondition" resultMap="BaseResultMap" parameterType="java.util.Map">
        SELECT 
            sqs.*,
            e.exam_name,
            s.name as student_name,
            q.content as question_content,
            q.type as question_type,
            q.answer as correct_answer
        FROM student_question_score sqs
        LEFT JOIN exam e ON sqs.exam_id = e.exam_id
        LEFT JOIN student s ON sqs.student_id = s.student_id
        LEFT JOIN question q ON sqs.question_id = q.question_id
        <where>
            <if test="examId != null">AND sqs.exam_id = #{examId}</if>
            <if test="studentId != null">AND sqs.student_id = #{studentId}</if>
            <if test="questionId != null">AND sqs.question_id = #{questionId}</if>
            <if test="scoreId != null">AND sqs.score_id = #{scoreId}</if>
            <if test="status != null">AND sqs.status = #{status}</if>
            <if test="minScore != null">AND sqs.score >= #{minScore}</if>
            <if test="maxScore != null">AND sqs.score &lt;= #{maxScore}</if>
        </where>
        ORDER BY sqs.record_id DESC
    </select>

    <!-- 条件查询记录数 -->
    <select id="selectCountByCondition" resultType="java.lang.Long" parameterType="java.util.Map">
        SELECT COUNT(1)
        FROM student_question_score sqs
        <where>
            <if test="examId != null">AND sqs.exam_id = #{examId}</if>
            <if test="studentId != null">AND sqs.student_id = #{studentId}</if>
            <if test="questionId != null">AND sqs.question_id = #{questionId}</if>
            <if test="scoreId != null">AND sqs.score_id = #{scoreId}</if>
            <if test="status != null">AND sqs.status = #{status}</if>
            <if test="minScore != null">AND sqs.score >= #{minScore}</if>
            <if test="maxScore != null">AND sqs.score &lt;= #{maxScore}</if>
        </where>
    </select>

    <!-- 条件分页查询 -->
    <select id="selectPageByCondition" resultMap="BaseResultMap">
        SELECT 
            sqs.*,
            e.exam_name,
            s.name as student_name,
            q.content as question_content,
            q.type as question_type,
            q.answer as correct_answer,
            epq.question_score as full_score
        FROM student_question_score sqs
        LEFT JOIN exam e ON sqs.exam_id = e.exam_id
        LEFT JOIN student s ON sqs.student_id = s.student_id
        LEFT JOIN question q ON sqs.question_id = q.question_id
        LEFT JOIN exam_paper_question epq ON sqs.question_id = epq.question_id AND sqs.exam_id = epq.exam_id
        <where>
            <if test="condition.examId != null">AND sqs.exam_id = #{condition.examId}</if>
            <if test="condition.studentId != null">AND sqs.student_id = #{condition.studentId}</if>
            <if test="condition.questionId != null">AND sqs.question_id = #{condition.questionId}</if>
            <if test="condition.scoreId != null">AND sqs.score_id = #{condition.scoreId}</if>
            <if test="condition.status != null">AND sqs.status = #{condition.status}</if>
            <if test="condition.minScore != null">AND sqs.score >= #{condition.minScore}</if>
            <if test="condition.maxScore != null">AND sqs.score &lt;= #{condition.maxScore}</if>
        </where>
        ORDER BY sqs.record_id DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 批量删除得分记录 -->
    <delete id="batchDelete">
        DELETE FROM student_question_score
        WHERE record_id IN
        <foreach collection="recordIds" item="recordId" open="(" separator="," close=")">
            #{recordId}
        </foreach>
    </delete>

    <!-- 查询学生答题详情 -->
    <select id="selectAnswerDetails" resultType="java.util.Map">
        SELECT 
            sqs.*,
            q.content as question_content,
            q.answer as correct_answer,
            q.type as question_type,
            epq.question_score as full_score
        FROM student_question_score sqs
        INNER JOIN question q ON sqs.question_id = q.question_id
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        WHERE sqs.student_id = #{studentId}
        ORDER BY epq.question_order
    </select>

    <!-- 统计错题分布 -->
    <select id="analyzeMistakeDistribution" resultType="java.util.Map">
        SELECT 
            q.type as question_type,
            COUNT(1) as mistake_count,
            CAST(COUNT(1) * 100.0 / SUM(COUNT(1)) OVER() AS DECIMAL(5,2)) as mistake_rate
        FROM student_question_score sqs
        INNER JOIN question q ON sqs.question_id = q.question_id
        INNER JOIN exam_paper_question epq 
            ON sqs.question_id = epq.question_id
            AND sqs.exam_id = #{examId}
        WHERE sqs.student_id = #{studentId}
        AND sqs.score &lt; epq.question_score * 0.6
        GROUP BY q.type
        ORDER BY mistake_count DESC
    </select>

    <select id="selectByExamQuestionAndStudent" resultMap="BaseResultMap">
        SELECT 
            *
        FROM 
            student_question_score
        WHERE 
            exam_id = #{examId}
            AND question_id = #{questionId}
            AND student_id = #{studentId}
        LIMIT 1
    </select>

</mapper>

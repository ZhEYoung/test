<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.SubjectMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.exam.entity.Subject">
        <id column="subject_id" property="subjectId"/>
        <result column="subject_name" property="subjectName"/>
        <result column="college_id" property="collegeId"/>
        <result column="description" property="description"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        subject_id, subject_name, college_id, description
    </sql>

    <!-- 插入学科记录 -->
    <insert id="insert" parameterType="com.exam.entity.Subject" useGeneratedKeys="true" keyProperty="subjectId">
        INSERT INTO subject (subject_name, college_id, description)
        VALUES (#{subjectName}, #{collegeId}, #{description})
    </insert>

    <!-- 批量插入学科记录 -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO subject (subject_name, college_id, description)
        VALUES 
        <foreach collection="subjects" item="subject" separator=",">
            (#{subject.subjectName}, #{subject.collegeId}, #{subject.description})
        </foreach>
    </insert>

    <!-- 根据ID删除学科 -->
    <delete id="deleteById">
        DELETE FROM subject WHERE subject_id = #{subjectId}
    </delete>

    <!-- 批量删除学科 -->
    <delete id="batchDelete">
        DELETE FROM subject 
        WHERE subject_id IN
        <foreach collection="subjectIds" item="subjectId" open="(" separator="," close=")">
            #{subjectId}
        </foreach>
    </delete>

    <!-- 更新学科信息 -->
    <update id="updateById" parameterType="com.exam.entity.Subject">
        UPDATE subject
        <set>
            <if test="subjectName != null">subject_name = #{subjectName},</if>
            <if test="collegeId != null">college_id = #{collegeId},</if>
            <if test="description != null">description = #{description},</if>
        </set>
        WHERE subject_id = #{subjectId}
    </update>

    <!-- 批量更新学科信息 -->
    <update id="batchUpdate" parameterType="java.util.List">
        <foreach collection="subjects" item="subject" separator=";">
            UPDATE subject
            <set>
                <if test="subject.subjectName != null">subject_name = #{subject.subjectName},</if>
                <if test="subject.collegeId != null">college_id = #{subject.collegeId},</if>
                <if test="subject.description != null">description = #{subject.description},</if>
            </set>
            WHERE subject_id = #{subject.subjectId}
        </foreach>
    </update>

    <!-- 根据ID查询学科 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM subject
        WHERE subject_id = #{subjectId}
    </select>

    <!-- 查询所有学科 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM subject
        ORDER BY subject_id DESC
    </select>

    <!-- 分页查询学科列表 -->
    <select id="selectPage" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM subject
        ORDER BY subject_id DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 统计学科总数 -->
    <select id="selectCount" resultType="int">
        SELECT COUNT(1) FROM subject
    </select>

    <!-- 根据条件查询学科 -->
    <select id="selectByCondition" parameterType="com.exam.entity.Subject" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM subject
        <where>
            <if test="subjectName != null">AND subject_name LIKE CONCAT('%', #{subjectName}, '%')</if>
            <if test="collegeId != null">AND college_id = #{collegeId}</if>
        </where>
        ORDER BY subject_id DESC
    </select>

    <!-- 根据学院ID查询学科列表 -->
    <select id="selectByCollegeId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM subject 
        WHERE college_id = #{collegeId}
        ORDER BY subject_id DESC
    </select>

    <!-- 根据学科名称查询 -->
    <select id="selectBySubjectName" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM subject 
        WHERE subject_name = #{subjectName}
        LIMIT 1
    </select>

    <!-- 更新学科描述 -->
    <update id="updateDescription">
        UPDATE subject 
        SET description = #{description} 
        WHERE subject_id = #{subjectId}
    </update>

    <!-- 批量更新学科描述 -->
    <update id="batchUpdateDescription">
        UPDATE subject 
        SET description = #{description}
        WHERE subject_id IN
        <foreach collection="subjectIds" item="subjectId" open="(" separator="," close=")">
            #{subjectId}
        </foreach>
    </update>

    <!-- 查询有考试的学科列表 -->
    <select id="selectSubjectsWithExams" resultMap="BaseResultMap">
        SELECT DISTINCT s.*
        FROM subject s
        INNER JOIN exam e ON s.subject_id = e.subject_id
        ORDER BY s.subject_id DESC
    </select>

    <!-- 查询指定教师教授的学科列表 -->
    <select id="selectByTeacherId" resultMap="BaseResultMap">
        SELECT DISTINCT s.*
        FROM subject s
        INNER JOIN class c ON s.subject_id = c.subject_id
        WHERE c.teacher_id = #{teacherId}
        ORDER BY s.subject_id DESC
    </select>

    <!-- 查询指定学生学习的学科列表 -->
    <select id="selectByStudentId" resultMap="BaseResultMap">
        SELECT DISTINCT s.*
        FROM subject s
        INNER JOIN class c ON s.subject_id = c.subject_id
        INNER JOIN student_class sc ON c.class_id = sc.class_id
        WHERE sc.student_id = #{studentId}
        AND sc.status = 1
        ORDER BY s.subject_id DESC
    </select>

    <!-- 统计各学科考试数量 -->
    <select id="countExamsBySubject" resultType="java.util.Map">
        SELECT 
            s.subject_id,
            s.subject_name,
            COUNT(e.exam_id) as exam_count
        FROM subject s
        LEFT JOIN exam e ON s.subject_id = e.subject_id
        GROUP BY s.subject_id, s.subject_name
        ORDER BY exam_count DESC
    </select>

    <!-- 统计各学科平均成绩 -->
    <select id="avgScoreBySubject" resultType="java.util.Map">
        SELECT 
            s.subject_id,
            s.subject_name,
            COUNT(DISTINCT e.exam_id) as exam_count,
            COUNT(DISTINCT ss.student_id) as student_count,
            CAST(AVG(ss.score) AS DECIMAL(5,2)) as avg_score
        FROM subject s
        LEFT JOIN exam e ON s.subject_id = e.subject_id
        LEFT JOIN student_score ss ON e.exam_id = ss.exam_id
        GROUP BY s.subject_id, s.subject_name
        ORDER BY avg_score DESC
    </select>

    <!-- 查询热门学科（按学生数量排序） -->
    <select id="selectHotSubjects" resultMap="BaseResultMap">
        SELECT 
            s.*,
            COUNT(DISTINCT sc.student_id) as student_count
        FROM subject s
        LEFT JOIN class c ON s.subject_id = c.subject_id
        LEFT JOIN student_class sc ON c.class_id = sc.class_id
        WHERE sc.status = 1
        GROUP BY s.subject_id, s.subject_name, s.college_id, s.description
        ORDER BY student_count DESC
        LIMIT #{limit}
    </select>

    <!-- 查询难度较高的学科（按平均分排序） -->
    <select id="selectDifficultSubjects" resultMap="BaseResultMap">
        SELECT 
            s.*,
            CAST(AVG(ss.score) AS DECIMAL(5,2)) as avg_score
        FROM subject s
        LEFT JOIN exam e ON s.subject_id = e.subject_id
        LEFT JOIN student_score ss ON e.exam_id = ss.exam_id
        GROUP BY s.subject_id, s.subject_name, s.college_id, s.description
        HAVING avg_score IS NOT NULL
        ORDER BY avg_score ASC
        LIMIT #{limit}
    </select>

    <!-- 统计学科关联的题库数量 -->
    <select id="countQuestionBanks" resultType="java.lang.Long">
        SELECT COUNT(1)
        FROM question_bank
        WHERE subject_id = #{subjectId}
    </select>

    <!-- 删除指定学科关联的所有题库 -->
    <delete id="deleteQuestionBanks">
        DELETE FROM question_bank
        WHERE subject_id = #{subjectId}
    </delete>
</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.ClassMapper">
    <!-- 基础列 -->
    <sql id="Base_Column_List">
        c.class_id, c.teacher_id, c.class_name, c.subject_id, c.final_exam
    </sql>

    <!-- 关联查询列 -->
    <sql id="Join_Column_List">
        c.class_id, c.teacher_id, c.class_name, c.subject_id, c.final_exam,
        t.name as teacher_name,
        s.subject_name
    </sql>

    <!-- 结果映射 -->
    <resultMap id="ClassResultMap" type="com.exam.entity.Class">
        <id column="class_id" property="classId"/>
        <result column="teacher_id" property="teacherId"/>
        <result column="class_name" property="className"/>
        <result column="subject_id" property="subjectId"/>
        <result column="final_exam" property="finalExam"/>
        <!-- 关联教师信息 -->
        <association property="teacher" javaType="com.exam.entity.Teacher">
            <id column="teacher_id" property="teacherId"/>
            <result column="teacher_name" property="name"/>
        </association>
        <!-- 关联学科信息 -->
        <association property="subject" javaType="com.exam.entity.Subject">
            <id column="subject_id" property="subjectId"/>
            <result column="subject_name" property="subjectName"/>
        </association>
    </resultMap>

    <!-- 插入班级记录 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="classId">
        INSERT INTO class (teacher_id, class_name, subject_id, final_exam)
        VALUES (#{teacherId}, #{className}, #{subjectId}, #{finalExam})
    </insert>

    <!-- 批量插入班级记录 -->
    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="classId">
        INSERT INTO class (teacher_id, class_name, subject_id, final_exam)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.teacherId}, #{item.className}, #{item.subjectId}, #{item.finalExam})
        </foreach>
    </insert>

    <!-- 根据ID删除班级 -->
    <delete id="deleteById">
        DELETE FROM class WHERE class_id = #{classId}
    </delete>

    <!-- 批量删除班级 -->
    <delete id="batchDelete">
        DELETE FROM class WHERE class_id IN
        <foreach collection="classIds" item="classId" open="(" separator="," close=")">
            #{classId}
        </foreach>
    </delete>

    <!-- 更新班级信息 -->
    <update id="updateById">
        UPDATE class
        <set>
            <if test="teacherId != null">teacher_id = #{teacherId},</if>
            <if test="className != null">class_name = #{className},</if>
            <if test="subjectId != null">subject_id = #{subjectId},</if>
            <if test="finalExam != null">final_exam = #{finalExam}</if>
        </set>
        WHERE class_id = #{classId}
    </update>

    <!-- 批量更新班级 -->
    <update id="batchUpdate">
        <foreach collection="list" item="item" separator=";">
            UPDATE class
            <set>
                <if test="item.teacherId != null">teacher_id = #{item.teacherId},</if>
                <if test="item.className != null">class_name = #{item.className},</if>
                <if test="item.subjectId != null">subject_id = #{item.subjectId},</if>
                <if test="item.finalExam != null">final_exam = #{item.finalExam}</if>
            </set>
            WHERE class_id = #{item.classId}
        </foreach>
    </update>

    <!-- 根据ID查询班级 -->
    <select id="selectById" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        WHERE c.class_id = #{classId}
    </select>

    <!-- 查询所有班级 -->
    <select id="selectAll" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
    </select>

    <!-- 分页查询班级 -->
    <select id="selectPage" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 查询班级总数 -->
    <select id="selectCount" resultType="java.lang.Long">
        SELECT COUNT(*) FROM class
    </select>

    <!-- 条件查询班级 -->
    <select id="selectByCondition" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        <where>
            <foreach collection="condition" index="key" item="value" separator="AND">
                <if test="value != null">
                    ${key} = #{value}
                </if>
            </foreach>
        </where>
    </select>

    <!-- 条件查询班级数量 -->
    <select id="selectCountByCondition" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        <where>
            <foreach collection="condition" index="key" item="value" separator="AND">
                <if test="value != null">
                    ${key} = #{value}
                </if>
            </foreach>
        </where>
    </select>

    <!-- 条件分页查询班级 -->
    <select id="selectPageByCondition" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        <where>
            <foreach collection="condition" index="key" item="value" separator="AND">
                <if test="value != null">
                    ${key} = #{value}
                </if>
            </foreach>
        </where>
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 根据教师ID查询班级列表 -->
    <select id="selectByTeacherId" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        WHERE c.teacher_id = #{teacherId}
    </select>

    <!-- 根据学科ID查询班级列表 -->
    <select id="selectBySubjectId" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        WHERE c.subject_id = #{subjectId}
    </select>

    <!-- 根据班级名称查询 -->
    <select id="selectByClassName" resultMap="ClassResultMap">
        SELECT <include refid="Join_Column_List" />
        FROM class c
        LEFT JOIN teacher t ON c.teacher_id = t.teacher_id
        LEFT JOIN subject s ON c.subject_id = s.subject_id
        WHERE c.class_name = #{className}
    </select>

    <!-- 更新期末考试状态 -->
    <update id="updateFinalExam">
        UPDATE class SET final_exam = #{finalExam}
        WHERE class_id = #{classId}
    </update>

    <!-- 查询班级学生列表 -->
    <select id="selectClassStudents" resultType="com.exam.entity.Student">
        SELECT s.*
        FROM student s
        INNER JOIN student_class sc ON s.student_id = sc.student_id
        WHERE sc.class_id = #{classId}
        AND sc.status = 1
    </select>

    <!-- 查询班级考试列表 -->
    <select id="selectClassExams" resultType="com.exam.entity.Exam">
        SELECT e.*
        FROM exam e
        INNER JOIN exam_class ec ON e.exam_id = ec.exam_id
        WHERE ec.class_id = #{classId}
        ORDER BY e.exam_start_time DESC
    </select>

    <!-- 查询班级期末考试 -->
    <select id="selectFinalExam" resultType="com.exam.entity.Exam">
        SELECT e.*
        FROM exam e
        INNER JOIN exam_class ec ON e.exam_id = ec.exam_id
        WHERE ec.class_id = #{classId}
        AND e.exam_type = 0
        ORDER BY e.exam_start_time DESC
        LIMIT 1
    </select>

    <!-- 统计班级学生数量 -->
    <select id="countStudents" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM student_class
        WHERE class_id = #{classId}
        AND status = 1
    </select>

    <!-- 统计班级考试数量 -->
    <select id="countExams" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM exam_class
        WHERE class_id = #{classId}
    </select>

    <!-- 查询班级平均成绩 -->
    <select id="selectAvgScore" resultType="java.lang.Double">
        SELECT AVG(ss.score)
        FROM student_score ss
        INNER JOIN exam_class ec ON ss.exam_id = ec.exam_id
        WHERE ec.class_id = #{classId}
        AND ss.exam_id = #{examId}
    </select>

    <!-- 查询班级成绩分布 -->
    <select id="selectScoreDistribution" resultType="java.util.Map">
        SELECT 
            CASE
                WHEN score >= 90 THEN '90-100'
                WHEN score >= 80 THEN '80-89'
                WHEN score >= 70 THEN '70-79'
                WHEN score >= 60 THEN '60-69'
                ELSE '0-59'
            END as score_range,
            COUNT(*) as count
        FROM student_score ss
        INNER JOIN exam_class ec ON ss.exam_id = ec.exam_id
        WHERE ec.class_id = #{classId}
        AND ss.exam_id = #{examId}
        GROUP BY score_range
        ORDER BY score_range DESC
    </select>

    <!-- 查询班级考试日程 -->
    <select id="selectExamSchedule" resultType="com.exam.entity.Exam">
        SELECT e.*
        FROM exam e
        INNER JOIN exam_class ec ON e.exam_id = ec.exam_id
        WHERE ec.class_id = #{classId}
        AND e.exam_start_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY e.exam_start_time
    </select>

    <!-- 批量添加学生到班级 -->
    <insert id="batchAddStudents">
        INSERT INTO student_class (student_id, class_id, status, join_time)
        VALUES
        <foreach collection="studentIds" item="studentId" separator=",">
            (#{studentId}, #{classId}, 1, NOW())
        </foreach>
    </insert>

    <!-- 批量移除班级学生 -->
    <update id="batchRemoveStudents">
        UPDATE student_class
        SET status = 0,
            left_time = NOW()
        WHERE class_id = #{classId}
        AND student_id IN
        <foreach collection="studentIds" item="studentId" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </update>
</mapper>

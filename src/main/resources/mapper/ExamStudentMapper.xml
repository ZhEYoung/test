<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.exam.mapper.ExamStudentMapper">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.exam.entity.ExamStudent">
        <id column="es_id" property="esId"/>
        <result column="exam_id" property="examId"/>
        <result column="student_id" property="studentId"/>
        <result column="student_start_time" property="studentStartTime"/>
        <result column="student_submit_time" property="studentSubmitTime"/>
        <result column="absent" property="absent"/>
        <result column="retake_needed" property="retakeNeeded"/>
        <result column="disciplinary" property="disciplinary"/>
        <result column="teacher_comment" property="teacherComment"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        es_id, exam_id, student_id, student_start_time, student_submit_time,
        absent, retake_needed, disciplinary, teacher_comment
    </sql>

    <!-- 插入考试学生关联记录 -->
    <insert id="insert" parameterType="com.exam.entity.ExamStudent" useGeneratedKeys="true" keyProperty="esId">
        INSERT INTO exam_student (
            exam_id, student_id, student_start_time, student_submit_time,
            absent, retake_needed, disciplinary, teacher_comment
        ) VALUES (
            #{examId}, #{studentId}, #{studentStartTime}, #{studentSubmitTime},
            #{absent}, #{retakeNeeded}, #{disciplinary}, #{teacherComment}
        )
    </insert>

    <!-- 根据ID删除考试学生关联 -->
    <delete id="deleteById">
        DELETE FROM exam_student WHERE es_id = #{esId}
    </delete>

    <!-- 更新考试学生关联信息 -->
    <update id="update" parameterType="com.exam.entity.ExamStudent">
        UPDATE exam_student
        <set>
            <if test="examId != null">exam_id = #{examId},</if>
            <if test="studentId != null">student_id = #{studentId},</if>
            <if test="studentStartTime != null">student_start_time = #{studentStartTime},</if>
            <if test="studentSubmitTime != null">student_submit_time = #{studentSubmitTime},</if>
            <if test="absent != null">absent = #{absent},</if>
            <if test="retakeNeeded != null">retake_needed = #{retakeNeeded},</if>
            <if test="disciplinary != null">disciplinary = #{disciplinary},</if>
            <if test="teacherComment != null">teacher_comment = #{teacherComment}</if>
        </set>
        WHERE es_id = #{esId}
    </update>

    <!-- 根据ID查询考试学生关联 -->
    <select id="selectById" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM exam_student 
        WHERE es_id = #{esId}
    </select>

    <!-- 查询所有考试学生关联 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM exam_student
        ORDER BY exam_id, student_id
    </select>

    <!-- 根据考试ID查询学生关联列表 -->
    <select id="selectByExamId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM exam_student 
        WHERE exam_id = #{examId}
        ORDER BY student_id
    </select>

    <!-- 根据学生ID查询考试关联列表 -->
    <select id="selectByStudentId" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM exam_student 
        WHERE student_id = #{studentId}
        ORDER BY exam_id DESC
    </select>

    <!-- 查询学生在指定考试的关联记录 -->
    <select id="selectByExamAndStudent" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM exam_student 
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </select>

    <!-- 更新考试状态 -->
    <update id="updateStatus">
        UPDATE exam_student 
        SET absent = #{absent},
            retake_needed = #{retakeNeeded},
            disciplinary = #{disciplinary},
            teacher_comment = #{teacherComments}
        WHERE es_id = #{esId}
    </update>

    <!-- 批量插入考试学生关联 -->
    <insert id="batchInsert">
        INSERT INTO exam_student (
            exam_id, student_id, student_start_time,
            student_submit_time, absent, retake_needed,
            disciplinary, teacher_comment
        ) VALUES 
        <foreach collection="list" item="es" separator=",">
            (#{es.examId}, #{es.studentId}, #{es.studentStartTime},
             #{es.studentSubmitTime}, #{es.absent}, #{es.retakeNeeded},
             #{es.disciplinary}, #{es.teacherComment})
        </foreach>
    </insert>

    <!-- 更新学生考试开始和提交时间 -->
    <update id="updateExamTime">
        UPDATE exam_student 
        SET student_start_time = #{startTime},
            student_submit_time = #{submitTime}
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </update>

    <!-- 查询需要重考的学生列表 -->
    <select id="selectNeedRetakeStudents" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM exam_student 
        WHERE exam_id = #{examId}
        AND retake_needed = 1
        ORDER BY student_id
    </select>

    <!-- 查询学生的所有重考相关记录（包括原始考试和重考） -->
    <select id="selectStudentRetakeExams" resultMap="BaseResultMap">
        SELECT es.es_id, es.exam_id, es.student_id, es.student_start_time, 
               es.student_submit_time, es.absent, es.retake_needed, 
               es.disciplinary, es.teacher_comment
        FROM exam_student es
        INNER JOIN exam e ON es.exam_id = e.exam_id
        WHERE es.student_id = #{studentId}
        AND (e.exam_type = 1 OR es.retake_needed = true)
        ORDER BY e.exam_start_time DESC
    </select>

    <!-- 按学科查询需要重考的学生列表 -->
    <select id="selectRetakeStudentsBySubject" resultType="java.util.Map">
        SELECT 
            s.student_id,
            s.name as student_name,
            e.exam_name,
            e.exam_start_time,
            es.student_start_time,
            es.student_submit_time,
            es.retake_needed,
            s.college_id
        FROM exam_student es
        JOIN exam e ON es.exam_id = e.exam_id
        JOIN student s ON es.student_id = s.student_id
        WHERE e.subject_id = #{subjectId}
        AND es.retake_needed = true
        <if test="collegeId != null">
            AND s.college_id = #{collegeId}
        </if>
        ORDER BY e.exam_start_time DESC
    </select>

    <!-- 统计某学科的重考情况 -->
    <select id="countRetakeBySubject" resultType="java.util.Map">
        SELECT 
            COUNT(DISTINCT es.student_id) as retake_student_count,
            COUNT(DISTINCT es.exam_id) as retake_exam_count,
            ROUND(AVG(CASE WHEN es.retake_needed = 1 THEN 1 ELSE 0 END) * 100, 2) as retake_rate,
            COUNT(DISTINCT CASE WHEN es.disciplinary = 1 THEN es.student_id END) as disciplinary_count
        FROM exam_student es
        INNER JOIN exam e ON es.exam_id = e.exam_id
        WHERE e.subject_id = #{subjectId}
        AND e.teacher_id = #{teacherId}
    </select>

    <!-- 批量更新考试状态 -->
    <update id="batchUpdateStatus">
        UPDATE exam_student 
        SET absent = #{status.absent},
            retake_needed = #{status.retakeNeeded},
            disciplinary = #{status.disciplinary}
        WHERE exam_id = #{examId}
        AND student_id IN
        <foreach collection="studentIds" item="studentId" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </update>

    <!-- 查询考试进行状态 -->
    <select id="selectExamProgress" resultType="java.util.Map">
        SELECT 
            COUNT(DISTINCT es.student_id) as total_students,
            COUNT(DISTINCT CASE WHEN es.student_start_time IS NOT NULL THEN es.student_id END) as started_students,
            COUNT(DISTINCT CASE WHEN es.student_submit_time IS NOT NULL THEN es.student_id END) as submitted_students,
            COUNT(DISTINCT CASE WHEN es.absent = 1 THEN es.student_id END) as absent_students,
            ROUND(COUNT(DISTINCT CASE WHEN es.student_submit_time IS NOT NULL THEN es.student_id END) * 100.0 
                / NULLIF(COUNT(DISTINCT es.student_id), 0), 2) as completion_rate
        FROM exam_student es
        WHERE es.exam_id = #{examId}
    </select>

    <!-- 查询考试时间异常的学生 -->
    <select id="selectAbnormalTimeStudents" resultType="java.util.Map">
        SELECT 
            s.student_id,
            s.name as student_name,
            es.student_start_time,
            es.student_submit_time,
            TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) as used_time,
            e.exam_duration as allowed_time,
            es.teacher_comment
        FROM exam_student es
        INNER JOIN student s ON es.student_id = s.student_id
        INNER JOIN exam e ON es.exam_id = e.exam_id
        WHERE es.exam_id = #{examId}
        AND es.student_submit_time IS NOT NULL
        AND TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time) > #{timeThreshold}
        ORDER BY used_time DESC
    </select>

    <!-- 统计考试参与情况 -->
    <select id="countExamParticipation" resultType="java.util.Map">
        SELECT 
            COUNT(DISTINCT es.student_id) as total_students,
            COUNT(DISTINCT CASE WHEN es.student_submit_time IS NOT NULL THEN es.student_id END) as completed_students,
            COUNT(DISTINCT CASE WHEN es.absent = 1 THEN es.student_id END) as absent_students,
            COUNT(DISTINCT CASE WHEN es.disciplinary = 1 THEN es.student_id END) as disciplinary_students,
            ROUND(COUNT(DISTINCT CASE WHEN es.student_submit_time IS NOT NULL THEN es.student_id END) * 100.0 
                / NULLIF(COUNT(DISTINCT es.student_id), 0), 2) as completion_rate,
            ROUND(COUNT(DISTINCT CASE WHEN es.absent = 1 THEN es.student_id END) * 100.0 
                / NULLIF(COUNT(DISTINCT es.student_id), 0), 2) as absent_rate
        FROM exam_student es
        WHERE es.exam_id = #{examId}
    </select>

    <!-- 查询学生考试时长统计 -->
    <select id="selectExamDurationStats" resultType="java.util.Map">
        SELECT 
            MIN(TIMESTAMPDIFF(MINUTE, student_start_time, student_submit_time)) as min_duration,
            MAX(TIMESTAMPDIFF(MINUTE, student_start_time, student_submit_time)) as max_duration,
            ROUND(AVG(TIMESTAMPDIFF(MINUTE, student_start_time, student_submit_time)), 2) as avg_duration,
            COUNT(CASE WHEN student_submit_time IS NOT NULL THEN 1 END) as submitted_count
        FROM exam_student
        WHERE exam_id = #{examId}
        AND student_submit_time IS NOT NULL
    </select>

    <!-- 查询考试违纪情况 -->
    <select id="selectDisciplinaryStats" resultType="java.util.Map">
        SELECT 
            e.exam_id,
            e.exam_name,
            e.exam_start_time,
            COUNT(DISTINCT es.student_id) as total_students,
            COUNT(DISTINCT CASE WHEN es.disciplinary = 1 THEN es.student_id END) as disciplinary_students,
            ROUND(COUNT(DISTINCT CASE WHEN es.disciplinary = 1 THEN es.student_id END) * 100.0 
                / NULLIF(COUNT(DISTINCT es.student_id), 0), 2) as disciplinary_rate,
            GROUP_CONCAT(DISTINCT CASE WHEN es.disciplinary = 1 
                THEN CONCAT(s.name, ': ', es.teacher_comment) END SEPARATOR '; ') as comments
        FROM exam_student es
        INNER JOIN exam e ON es.exam_id = e.exam_id
        INNER JOIN student s ON es.student_id = s.student_id
        WHERE e.exam_start_time BETWEEN #{startTime} AND #{endTime}
        AND es.disciplinary = 1
        GROUP BY e.exam_id, e.exam_name, e.exam_start_time
        ORDER BY e.exam_start_time DESC
    </select>

    <!-- 更新考试监考记录 -->
    <update id="updateInvigilationRecord">
        UPDATE exam_student 
        SET teacher_comment = #{record}
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </update>

    <!-- 批量更新考试时间 -->
    <update id="batchUpdateExamTime">
        <foreach collection="studentTimes" item="st" separator=";">
            UPDATE exam_student 
            SET student_start_time = #{st.startTime},
                student_submit_time = #{st.submitTime}
            WHERE exam_id = #{examId} 
            AND student_id = #{st.studentId}
        </foreach>
    </update>

    <!-- 查询考试完成率 -->
    <select id="selectExamCompletionRate" resultType="java.util.Map">
        SELECT 
            COUNT(DISTINCT sc.student_id) as total_students,
            COUNT(DISTINCT CASE WHEN es.student_submit_time IS NOT NULL THEN es.student_id END) as completed_students,
            ROUND(COUNT(DISTINCT CASE WHEN es.student_submit_time IS NOT NULL THEN es.student_id END) * 100.0 
                / NULLIF(COUNT(DISTINCT sc.student_id), 0), 2) as completion_rate,
            COUNT(DISTINCT CASE WHEN es.absent = 1 THEN es.student_id END) as absent_students,
            COUNT(DISTINCT CASE WHEN es.disciplinary = 1 THEN es.student_id END) as disciplinary_students,
            MIN(TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time)) as min_duration,
            MAX(TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time)) as max_duration,
            ROUND(AVG(TIMESTAMPDIFF(MINUTE, es.student_start_time, es.student_submit_time)), 2) as avg_duration
        FROM student_class sc
        LEFT JOIN exam_student es ON sc.student_id = es.student_id
        WHERE sc.class_id = #{classId}
        AND es.exam_id = #{examId}
    </select>

    <!-- 统计考试总人数 -->
    <select id="countByExamId" resultType="int">
        SELECT COUNT(*)
        FROM exam_student
        WHERE exam_id = #{examId}
    </select>

    <!-- 统计已开始考试的学生人数 -->
    <select id="countStartedStudents" resultType="int">
        SELECT COUNT(*)
        FROM exam_student
        WHERE exam_id = #{examId}
        AND student_start_time IS NOT NULL
        AND absent = FALSE
    </select>

    <!-- 统计已提交考试的学生人数 -->
    <select id="countSubmittedStudents" resultType="int">
        SELECT COUNT(*)
        FROM exam_student
        WHERE exam_id = #{examId}
        AND student_submit_time IS NOT NULL
        AND absent = FALSE
    </select>

    <!-- 统计缺考学生人数 -->
    <select id="countAbsentStudents" resultType="int">
        SELECT COUNT(*)
        FROM exam_student
        WHERE exam_id = #{examId}
        AND absent = TRUE
    </select>

    <!-- 更新学生开始考试时间 -->
    <update id="updateStartTime" parameterType="map">
        UPDATE exam_student 
        SET student_start_time = #{startTime}
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </update>

    <!-- 更新学生提交考试时间 -->
    <update id="updateSubmitTime" parameterType="map">
        UPDATE exam_student 
        SET student_submit_time = #{submitTime}
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </update>

    <!-- 更新缺考状态 -->
    <update id="updateAbsentStatus" parameterType="map">
        UPDATE exam_student 
        SET absent = #{absent}
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </update>

    <!-- 更新违纪状态 -->
    <update id="updateDisciplinaryStatus" parameterType="map">
        UPDATE exam_student 
        SET disciplinary = #{disciplinary},
            teacher_comment = #{comment}
        WHERE exam_id = #{examId} 
        AND student_id = #{studentId}
    </update>

    <!-- 查询违纪记录 -->
    <select id="selectDisciplinaryRecords" resultType="map">
        SELECT 
            e.exam_id,
            e.exam_name,
            e.exam_start_time,
            COUNT(es.student_id) as disciplinary_count,
            GROUP_CONCAT(
                CASE WHEN es.disciplinary = 1 
                THEN CONCAT(s.name, ': ', es.teacher_comment) END SEPARATOR '; '
            ) as comments
        FROM exam_student es
        INNER JOIN exam e ON es.exam_id = e.exam_id
        INNER JOIN student s ON es.student_id = s.student_id
        WHERE e.exam_start_time BETWEEN #{startTime} AND #{endTime}
        AND es.disciplinary = 1
        GROUP BY e.exam_id, e.exam_name, e.exam_start_time
        ORDER BY e.exam_start_time DESC
    </select>

    <!-- 查询未提交考试的学生列表 -->
    <select id="selectUnsubmittedStudents" resultType="com.exam.entity.ExamStudent">
        SELECT es.*
        FROM exam_student es
        WHERE es.exam_id = #{examId}
        AND es.student_start_time IS NOT NULL
        AND es.student_submit_time IS NULL
        AND es.absent = false
    </select>

    <!-- 查询未开始考试的学生列表 -->
    <select id="selectNotStartedStudents" resultType="com.exam.entity.ExamStudent">
        SELECT es.*
        FROM exam_student es
        WHERE es.exam_id = #{examId}
        AND es.student_start_time IS NULL
        AND es.absent = false
    </select>
</mapper>
